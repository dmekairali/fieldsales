{"ast":null,"code":"var _jsxFileName = \"/Users/kairalimidnight23/Desktop/fieldsales-main 2/src/components/GeocodingDashboard.js\",\n  _s = $RefreshSig$();\n// Google Maps Geocoding API Integration\nimport React, { useState, useEffect } from 'react';\nimport { supabase } from '../supabaseClient';\n\n// Configuration\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GOOGLE_MAPS_API_KEY = process.env.REACT_APP_GOOGLE_MAPS_API_KEY;\nconst BATCH_SIZE = 50; // Process 50 addresses at a time to stay within rate limits\nconst DELAY_BETWEEN_BATCHES = 1000; // 1 second delay between batches\n\nclass GeocodingService {\n  constructor() {\n    this.processedCount = 0;\n    this.successCount = 0;\n    this.errorCount = 0;\n    this.isProcessing = false;\n  }\n\n  // Single address geocoding\n  async geocodeAddress(address) {\n    if (!address || address.trim() === '') {\n      throw new Error('Address is required');\n    }\n    const encodedAddress = encodeURIComponent(address);\n    const url = `https://maps.googleapis.com/maps/api/geocode/json?address=${encodedAddress}&key=${GOOGLE_MAPS_API_KEY}`;\n    try {\n      const response = await fetch(url);\n      const data = await response.json();\n      if (data.status === 'OK' && data.results.length > 0) {\n        const location = data.results[0].geometry.location;\n        return {\n          latitude: location.lat,\n          longitude: location.lng,\n          formatted_address: data.results[0].formatted_address,\n          status: 'SUCCESS'\n        };\n      } else {\n        return {\n          latitude: null,\n          longitude: null,\n          formatted_address: null,\n          status: 'FAILED',\n          error: data.status\n        };\n      }\n    } catch (error) {\n      console.error('Geocoding error:', error);\n      return {\n        latitude: null,\n        longitude: null,\n        formatted_address: null,\n        status: 'ERROR',\n        error: error.message\n      };\n    }\n  }\n\n  // Get customers without coordinates (fixed to get ALL customers)\n  async getCustomersWithoutCoordinates() {\n    // First, get the count\n    const {\n      count,\n      error: countError\n    } = await supabase.from('customer_master').select('*', {\n      count: 'exact',\n      head: true\n    }).or('latitude.is.null,longitude.is.null').eq('status', 'ACTIVE').not('full_address', 'is', null);\n    if (countError) {\n      console.error('Error counting customers:', countError);\n    } else {\n      console.log(`Total customers needing geocoding: ${count}`);\n    }\n\n    // Get all customers without coordinates (no limit)\n    const {\n      data,\n      error\n    } = await supabase.from('customer_master').select('id, customer_code, customer_name, full_address, city_name, pin_code').or('latitude.is.null,longitude.is.null').eq('status', 'ACTIVE').not('full_address', 'is', null).order('id').limit(10000); // Set high limit to get all\n\n    if (error) {\n      console.error('Error fetching customers:', error);\n      return [];\n    }\n    console.log(`Fetched ${(data === null || data === void 0 ? void 0 : data.length) || 0} customers for geocoding`);\n    return data || [];\n  }\n\n  // Update customer coordinates in database\n  async updateCustomerCoordinates(customerId, geocodeResult) {\n    const {\n      error\n    } = await supabase.from('customer_master').update({\n      latitude: geocodeResult.latitude,\n      longitude: geocodeResult.longitude,\n      updated_at: new Date().toISOString()\n    }).eq('id', customerId);\n    if (error) {\n      console.error('Error updating coordinates:', error);\n      return false;\n    }\n    return true;\n  }\n\n  // Build address string for geocoding (improved based on Apps Script success)\n  buildAddressString(customer) {\n    const parts = [];\n\n    // Keep full address exactly as is (including Plus Codes - they help!)\n    if (customer.full_address && customer.full_address.trim()) {\n      parts.push(customer.full_address.trim());\n    }\n\n    // Only add city if it's not already in the address\n    if (customer.city_name && customer.city_name.trim()) {\n      const cityName = customer.city_name.trim();\n      const currentAddress = parts.join(', ').toLowerCase();\n      if (!currentAddress.includes(cityName.toLowerCase())) {\n        parts.push(cityName);\n      }\n    }\n\n    // Only add pincode if not already present\n    if (customer.pin_code && customer.pin_code.trim()) {\n      const pinCode = customer.pin_code.trim();\n      const currentAddress = parts.join(', ');\n      if (!currentAddress.includes(pinCode)) {\n        parts.push(pinCode);\n      }\n    }\n\n    // Add India if not already present\n    const addressStr = parts.join(', ');\n    if (!addressStr.toLowerCase().includes('india')) {\n      parts.push('India');\n    }\n    return parts.join(', ');\n  }\n\n  // Enhanced geocoding with multiple strategies like your Apps Script\n  async geocodeAddressWithFallback(customer) {\n    // Strategy 1: Full address (exactly like your Apps Script)\n    const fullAddress = this.buildAddressString(customer);\n    let result = await this.geocodeAddress(fullAddress);\n    if (result.status === 'SUCCESS') {\n      return {\n        ...result,\n        strategy: 'full_address'\n      };\n    }\n\n    // Strategy 2: Plus Code only (if present)\n    if (customer.full_address) {\n      const plusCodeMatch = customer.full_address.match(/[A-Z0-9]{4}\\+[A-Z0-9]{2,}/);\n      if (plusCodeMatch) {\n        const plusCodeAddress = `${plusCodeMatch[0]}, ${customer.city_name || ''}, India`;\n        result = await this.geocodeAddress(plusCodeAddress);\n        if (result.status === 'SUCCESS') {\n          return {\n            ...result,\n            strategy: 'plus_code'\n          };\n        }\n      }\n    }\n\n    // Strategy 3: Simplified with state (common in Indian addresses)\n    if (customer.city_name && customer.pin_code) {\n      // Try to detect state from full address\n      const stateKeywords = ['delhi', 'mumbai', 'bangalore', 'kolkata', 'chennai', 'hyderabad', 'pune', 'odisha', 'uttar pradesh', 'maharashtra', 'karnataka', 'tamil nadu', 'west bengal', 'telangana'];\n      let detectedState = '';\n      if (customer.full_address) {\n        const addressLower = customer.full_address.toLowerCase();\n        for (const state of stateKeywords) {\n          if (addressLower.includes(state)) {\n            detectedState = state;\n            break;\n          }\n        }\n      }\n      const stateAddress = detectedState ? `${customer.city_name}, ${detectedState}, ${customer.pin_code}, India` : `${customer.city_name}, ${customer.pin_code}, India`;\n      result = await this.geocodeAddress(stateAddress);\n      if (result.status === 'SUCCESS') {\n        return {\n          ...result,\n          strategy: 'city_state_pin'\n        };\n      }\n    }\n\n    // Strategy 4: Just PIN code (very reliable in India)\n    if (customer.pin_code) {\n      result = await this.geocodeAddress(`${customer.pin_code}, India`);\n      if (result.status === 'SUCCESS') {\n        return {\n          ...result,\n          strategy: 'pin_only'\n        };\n      }\n    }\n\n    // Strategy 5: Just city\n    if (customer.city_name) {\n      result = await this.geocodeAddress(`${customer.city_name}, India`);\n      if (result.status === 'SUCCESS') {\n        return {\n          ...result,\n          strategy: 'city_only'\n        };\n      }\n    }\n    return {\n      latitude: null,\n      longitude: null,\n      status: 'FAILED',\n      error: 'All strategies failed',\n      strategy: 'none'\n    };\n  }\n\n  // Process single batch of customers\n  async processBatch(customers, onProgress) {\n    const results = [];\n    for (let i = 0; i < customers.length; i++) {\n      const customer = customers[i];\n      const address = this.buildAddressString(customer);\n      try {\n        const geocodeResult = await this.geocodeAddressWithFallback(customer);\n        if (geocodeResult.status === 'SUCCESS') {\n          const updateSuccess = await this.updateCustomerCoordinates(customer.id, geocodeResult);\n          if (updateSuccess) {\n            this.successCount++;\n            console.log(`✅ Success (${geocodeResult.strategy}): ${customer.customer_name}`);\n          }\n        } else {\n          this.errorCount++;\n          console.warn(`❌ Failed: ${customer.customer_name} - ${address} (tried all strategies)`);\n        }\n        this.processedCount++;\n\n        // Report progress\n        if (onProgress) {\n          onProgress({\n            processed: this.processedCount,\n            success: this.successCount,\n            errors: this.errorCount,\n            currentCustomer: customer.customer_name,\n            currentAddress: address,\n            result: geocodeResult\n          });\n        }\n        results.push({\n          customer: customer,\n          address: address,\n          result: geocodeResult\n        });\n\n        // Small delay between requests to avoid rate limiting\n        await new Promise(resolve => setTimeout(resolve, 100));\n      } catch (error) {\n        this.errorCount++;\n        console.error(`Error processing customer ${customer.customer_name}:`, error);\n      }\n    }\n    return results;\n  }\n\n  // Main function to geocode all customers\n  async geocodeAllCustomers(onProgress, onComplete) {\n    if (this.isProcessing) {\n      throw new Error('Geocoding is already in progress');\n    }\n    this.isProcessing = true;\n    this.processedCount = 0;\n    this.successCount = 0;\n    this.errorCount = 0;\n    try {\n      // Get customers without coordinates\n      const customers = await this.getCustomersWithoutCoordinates();\n      if (customers.length === 0) {\n        if (onComplete) {\n          onComplete({\n            totalCustomers: 0,\n            processed: 0,\n            success: 0,\n            errors: 0,\n            message: 'All customers already have coordinates!'\n          });\n        }\n        return;\n      }\n      console.log(`Starting geocoding for ${customers.length} customers...`);\n\n      // Process in batches\n      for (let i = 0; i < customers.length; i += BATCH_SIZE) {\n        const batch = customers.slice(i, i + BATCH_SIZE);\n        const batchNumber = Math.floor(i / BATCH_SIZE) + 1;\n        const totalBatches = Math.ceil(customers.length / BATCH_SIZE);\n        console.log(`Processing batch ${batchNumber}/${totalBatches} (${batch.length} customers)`);\n        await this.processBatch(batch, onProgress);\n\n        // Delay between batches to respect rate limits\n        if (i + BATCH_SIZE < customers.length) {\n          console.log(`Waiting ${DELAY_BETWEEN_BATCHES}ms before next batch...`);\n          await new Promise(resolve => setTimeout(resolve, DELAY_BETWEEN_BATCHES));\n        }\n      }\n\n      // Final completion callback\n      if (onComplete) {\n        onComplete({\n          totalCustomers: customers.length,\n          processed: this.processedCount,\n          success: this.successCount,\n          errors: this.errorCount,\n          message: 'Geocoding completed!'\n        });\n      }\n    } catch (error) {\n      console.error('Geocoding process error:', error);\n      if (onComplete) {\n        onComplete({\n          totalCustomers: 0,\n          processed: this.processedCount,\n          success: this.successCount,\n          errors: this.errorCount,\n          error: error.message\n        });\n      }\n    } finally {\n      this.isProcessing = false;\n    }\n  }\n\n  // Get geocoding statistics (improved with detailed logging)\n  async getGeocodingStats() {\n    console.log('Fetching geocoding statistics...');\n    const {\n      data,\n      error\n    } = await supabase.from('customer_master').select('latitude, longitude, full_address, status').eq('status', 'ACTIVE');\n    if (error) {\n      console.error('Error fetching stats:', error);\n      return null;\n    }\n    console.log(`Total active customers in database: ${data.length}`);\n    const total = data.length;\n    const withCoordinates = data.filter(item => item.latitude && item.longitude).length;\n    const withoutCoordinates = total - withCoordinates;\n    const hasAddress = data.filter(item => item.full_address && item.full_address.trim()).length;\n    const noAddress = total - hasAddress;\n    console.log('Statistics breakdown:');\n    console.log(`- Total: ${total}`);\n    console.log(`- With coordinates: ${withCoordinates}`);\n    console.log(`- Without coordinates: ${withoutCoordinates}`);\n    console.log(`- Has address: ${hasAddress}`);\n    console.log(`- No address: ${noAddress}`);\n    return {\n      total,\n      withCoordinates,\n      withoutCoordinates,\n      hasAddress,\n      noAddress,\n      completionPercentage: total > 0 ? (withCoordinates / total * 100).toFixed(1) : 0\n    };\n  }\n}\n\n// React Component for Geocoding UI\nconst GeocodingDashboard = () => {\n  _s();\n  const [geocodingService] = useState(new GeocodingService());\n  const [stats, setStats] = useState(null);\n  const [progress, setProgress] = useState(null);\n  const [isRunning, setIsRunning] = useState(false);\n  const [results, setResults] = useState(null);\n\n  // Load initial stats\n  useEffect(() => {\n    loadStats();\n  }, []);\n  const loadStats = async () => {\n    const statsData = await geocodingService.getGeocodingStats();\n    setStats(statsData);\n  };\n  const startGeocoding = async () => {\n    setIsRunning(true);\n    setProgress(null);\n    setResults(null);\n    await geocodingService.geocodeAllCustomers(\n    // Progress callback\n    progressData => {\n      setProgress(progressData);\n    },\n    // Completion callback\n    resultData => {\n      setResults(resultData);\n      setIsRunning(false);\n      loadStats(); // Reload stats after completion\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"min-h-screen bg-gray-50 p-6\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"max-w-4xl mx-auto\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mb-8 text-center\",\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          className: \"text-3xl font-bold text-blue-600 mb-4\",\n          children: \"\\uD83D\\uDCCD Customer Geocoding Dashboard\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 430,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"text-gray-600\",\n          children: \"Add GPS coordinates to customer addresses using Google Maps API\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 433,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 429,\n        columnNumber: 17\n      }, this), stats && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"bg-white rounded-lg shadow-lg p-6 mb-8\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          className: \"text-xl font-semibold mb-4\",\n          children: \"Geocoding Statistics\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 441,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"grid grid-cols-1 md:grid-cols-4 gap-4\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"text-center\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"text-2xl font-bold text-blue-600\",\n              children: stats.total\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 444,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"text-sm text-gray-600\",\n              children: \"Total Customers\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 445,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 443,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"text-center\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"text-2xl font-bold text-green-600\",\n              children: stats.withCoordinates\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 448,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"text-sm text-gray-600\",\n              children: \"With Coordinates\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 449,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 447,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"text-center\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"text-2xl font-bold text-red-600\",\n              children: stats.withoutCoordinates\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 452,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"text-sm text-gray-600\",\n              children: \"Missing Coordinates\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 453,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 451,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"text-center\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"text-2xl font-bold text-purple-600\",\n              children: [stats.completionPercentage, \"%\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 456,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"text-sm text-gray-600\",\n              children: \"Completion Rate\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 457,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 455,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 442,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 440,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"bg-white rounded-lg shadow-lg p-6 mb-8\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          className: \"text-xl font-semibold mb-4\",\n          children: \"Geocoding Control\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 465,\n          columnNumber: 21\n        }, this), !isRunning ? /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: startGeocoding,\n          disabled: (stats === null || stats === void 0 ? void 0 : stats.withoutCoordinates) === 0,\n          className: \"bg-blue-600 hover:bg-blue-700 disabled:bg-gray-400 text-white px-6 py-3 rounded-lg font-semibold\",\n          children: (stats === null || stats === void 0 ? void 0 : stats.withoutCoordinates) === 0 ? 'All Customers Geocoded!' : `Start Geocoding ${stats === null || stats === void 0 ? void 0 : stats.withoutCoordinates} Customers`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 468,\n          columnNumber: 25\n        }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"text-blue-600 font-semibold\",\n          children: \"\\uD83D\\uDD04 Geocoding in progress...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 476,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 464,\n        columnNumber: 17\n      }, this), progress && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"bg-white rounded-lg shadow-lg p-6 mb-8\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          className: \"text-xl font-semibold mb-4\",\n          children: \"Progress\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 485,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"space-y-3\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"flex justify-between\",\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              children: \"Processed:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 488,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"font-semibold\",\n              children: progress.processed\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 489,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 487,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"flex justify-between\",\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              children: \"Successful:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 492,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"font-semibold text-green-600\",\n              children: progress.success\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 493,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 491,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"flex justify-between\",\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              children: \"Errors:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 496,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"font-semibold text-red-600\",\n              children: progress.errors\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 497,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 495,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"mt-4\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"text-sm text-gray-600 mb-2\",\n              children: \"Currently processing:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 500,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"font-medium\",\n              children: progress.currentCustomer\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 501,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"text-sm text-gray-500\",\n              children: progress.currentAddress\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 502,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 499,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 486,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 484,\n        columnNumber: 21\n      }, this), results && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"bg-white rounded-lg shadow-lg p-6\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          className: \"text-xl font-semibold mb-4\",\n          children: \"Geocoding Results\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 511,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"space-y-2\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"flex justify-between\",\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              children: \"Total Customers:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 514,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"font-semibold\",\n              children: results.totalCustomers\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 515,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 513,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"flex justify-between\",\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              children: \"Successfully Geocoded:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 518,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"font-semibold text-green-600\",\n              children: results.success\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 519,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 517,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"flex justify-between\",\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              children: \"Failed:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 522,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"font-semibold text-red-600\",\n              children: results.errors\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 523,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 521,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"flex justify-between\",\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              children: \"Success Rate:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 526,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"font-semibold text-blue-600\",\n              children: [results.totalCustomers > 0 ? (results.success / results.totalCustomers * 100).toFixed(1) : 0, \"%\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 527,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 525,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 512,\n          columnNumber: 25\n        }, this), results.message && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"mt-4 p-3 bg-green-100 text-green-800 rounded\",\n          children: results.message\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 533,\n          columnNumber: 29\n        }, this), results.error && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"mt-4 p-3 bg-red-100 text-red-800 rounded\",\n          children: [\"Error: \", results.error]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 538,\n          columnNumber: 29\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 510,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 428,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 427,\n    columnNumber: 9\n  }, this);\n};\n_s(GeocodingDashboard, \"7XcCGLe9ThZE8gK7PtE2uVsBAzA=\");\n_c = GeocodingDashboard;\nexport { GeocodingService, GeocodingDashboard };\nexport default GeocodingDashboard;\nvar _c;\n$RefreshReg$(_c, \"GeocodingDashboard\");","map":{"version":3,"names":["React","useState","useEffect","supabase","jsxDEV","_jsxDEV","GOOGLE_MAPS_API_KEY","process","env","REACT_APP_GOOGLE_MAPS_API_KEY","BATCH_SIZE","DELAY_BETWEEN_BATCHES","GeocodingService","constructor","processedCount","successCount","errorCount","isProcessing","geocodeAddress","address","trim","Error","encodedAddress","encodeURIComponent","url","response","fetch","data","json","status","results","length","location","geometry","latitude","lat","longitude","lng","formatted_address","error","console","message","getCustomersWithoutCoordinates","count","countError","from","select","head","or","eq","not","log","order","limit","updateCustomerCoordinates","customerId","geocodeResult","update","updated_at","Date","toISOString","buildAddressString","customer","parts","full_address","push","city_name","cityName","currentAddress","join","toLowerCase","includes","pin_code","pinCode","addressStr","geocodeAddressWithFallback","fullAddress","result","strategy","plusCodeMatch","match","plusCodeAddress","stateKeywords","detectedState","addressLower","state","stateAddress","processBatch","customers","onProgress","i","updateSuccess","id","customer_name","warn","processed","success","errors","currentCustomer","Promise","resolve","setTimeout","geocodeAllCustomers","onComplete","totalCustomers","batch","slice","batchNumber","Math","floor","totalBatches","ceil","getGeocodingStats","total","withCoordinates","filter","item","withoutCoordinates","hasAddress","noAddress","completionPercentage","toFixed","GeocodingDashboard","_s","geocodingService","stats","setStats","progress","setProgress","isRunning","setIsRunning","setResults","loadStats","statsData","startGeocoding","progressData","resultData","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","disabled","_c","$RefreshReg$"],"sources":["/Users/kairalimidnight23/Desktop/fieldsales-main 2/src/components/GeocodingDashboard.js"],"sourcesContent":["// Google Maps Geocoding API Integration\nimport React, { useState, useEffect } from 'react';\nimport { supabase } from '../supabaseClient';\n\n// Configuration\nconst GOOGLE_MAPS_API_KEY = process.env.REACT_APP_GOOGLE_MAPS_API_KEY;\nconst BATCH_SIZE = 50; // Process 50 addresses at a time to stay within rate limits\nconst DELAY_BETWEEN_BATCHES = 1000; // 1 second delay between batches\n\nclass GeocodingService {\n    constructor() {\n        this.processedCount = 0;\n        this.successCount = 0;\n        this.errorCount = 0;\n        this.isProcessing = false;\n    }\n\n    // Single address geocoding\n    async geocodeAddress(address) {\n        if (!address || address.trim() === '') {\n            throw new Error('Address is required');\n        }\n\n        const encodedAddress = encodeURIComponent(address);\n        const url = `https://maps.googleapis.com/maps/api/geocode/json?address=${encodedAddress}&key=${GOOGLE_MAPS_API_KEY}`;\n\n        try {\n            const response = await fetch(url);\n            const data = await response.json();\n\n            if (data.status === 'OK' && data.results.length > 0) {\n                const location = data.results[0].geometry.location;\n                return {\n                    latitude: location.lat,\n                    longitude: location.lng,\n                    formatted_address: data.results[0].formatted_address,\n                    status: 'SUCCESS'\n                };\n            } else {\n                return {\n                    latitude: null,\n                    longitude: null,\n                    formatted_address: null,\n                    status: 'FAILED',\n                    error: data.status\n                };\n            }\n        } catch (error) {\n            console.error('Geocoding error:', error);\n            return {\n                latitude: null,\n                longitude: null,\n                formatted_address: null,\n                status: 'ERROR',\n                error: error.message\n            };\n        }\n    }\n\n    // Get customers without coordinates (fixed to get ALL customers)\n    async getCustomersWithoutCoordinates() {\n        // First, get the count\n        const { count, error: countError } = await supabase\n            .from('customer_master')\n            .select('*', { count: 'exact', head: true })\n            .or('latitude.is.null,longitude.is.null')\n            .eq('status', 'ACTIVE')\n            .not('full_address', 'is', null);\n\n        if (countError) {\n            console.error('Error counting customers:', countError);\n        } else {\n            console.log(`Total customers needing geocoding: ${count}`);\n        }\n\n        // Get all customers without coordinates (no limit)\n        const { data, error } = await supabase\n            .from('customer_master')\n            .select('id, customer_code, customer_name, full_address, city_name, pin_code')\n            .or('latitude.is.null,longitude.is.null')\n            .eq('status', 'ACTIVE')\n            .not('full_address', 'is', null)\n            .order('id')\n            .limit(10000); // Set high limit to get all\n\n        if (error) {\n            console.error('Error fetching customers:', error);\n            return [];\n        }\n\n        console.log(`Fetched ${data?.length || 0} customers for geocoding`);\n        return data || [];\n    }\n\n    // Update customer coordinates in database\n    async updateCustomerCoordinates(customerId, geocodeResult) {\n        const { error } = await supabase\n            .from('customer_master')\n            .update({\n                latitude: geocodeResult.latitude,\n                longitude: geocodeResult.longitude,\n                updated_at: new Date().toISOString()\n            })\n            .eq('id', customerId);\n\n        if (error) {\n            console.error('Error updating coordinates:', error);\n            return false;\n        }\n        return true;\n    }\n\n    // Build address string for geocoding (improved based on Apps Script success)\n    buildAddressString(customer) {\n        const parts = [];\n        \n        // Keep full address exactly as is (including Plus Codes - they help!)\n        if (customer.full_address && customer.full_address.trim()) {\n            parts.push(customer.full_address.trim());\n        }\n        \n        // Only add city if it's not already in the address\n        if (customer.city_name && customer.city_name.trim()) {\n            const cityName = customer.city_name.trim();\n            const currentAddress = parts.join(', ').toLowerCase();\n            if (!currentAddress.includes(cityName.toLowerCase())) {\n                parts.push(cityName);\n            }\n        }\n        \n        // Only add pincode if not already present\n        if (customer.pin_code && customer.pin_code.trim()) {\n            const pinCode = customer.pin_code.trim();\n            const currentAddress = parts.join(', ');\n            if (!currentAddress.includes(pinCode)) {\n                parts.push(pinCode);\n            }\n        }\n        \n        // Add India if not already present\n        const addressStr = parts.join(', ');\n        if (!addressStr.toLowerCase().includes('india')) {\n            parts.push('India');\n        }\n        \n        return parts.join(', ');\n    }\n\n    // Enhanced geocoding with multiple strategies like your Apps Script\n    async geocodeAddressWithFallback(customer) {\n        // Strategy 1: Full address (exactly like your Apps Script)\n        const fullAddress = this.buildAddressString(customer);\n        let result = await this.geocodeAddress(fullAddress);\n        if (result.status === 'SUCCESS') {\n            return { ...result, strategy: 'full_address' };\n        }\n\n        // Strategy 2: Plus Code only (if present)\n        if (customer.full_address) {\n            const plusCodeMatch = customer.full_address.match(/[A-Z0-9]{4}\\+[A-Z0-9]{2,}/);\n            if (plusCodeMatch) {\n                const plusCodeAddress = `${plusCodeMatch[0]}, ${customer.city_name || ''}, India`;\n                result = await this.geocodeAddress(plusCodeAddress);\n                if (result.status === 'SUCCESS') {\n                    return { ...result, strategy: 'plus_code' };\n                }\n            }\n        }\n\n        // Strategy 3: Simplified with state (common in Indian addresses)\n        if (customer.city_name && customer.pin_code) {\n            // Try to detect state from full address\n            const stateKeywords = ['delhi', 'mumbai', 'bangalore', 'kolkata', 'chennai', 'hyderabad', 'pune', 'odisha', 'uttar pradesh', 'maharashtra', 'karnataka', 'tamil nadu', 'west bengal', 'telangana'];\n            let detectedState = '';\n            \n            if (customer.full_address) {\n                const addressLower = customer.full_address.toLowerCase();\n                for (const state of stateKeywords) {\n                    if (addressLower.includes(state)) {\n                        detectedState = state;\n                        break;\n                    }\n                }\n            }\n            \n            const stateAddress = detectedState \n                ? `${customer.city_name}, ${detectedState}, ${customer.pin_code}, India`\n                : `${customer.city_name}, ${customer.pin_code}, India`;\n                \n            result = await this.geocodeAddress(stateAddress);\n            if (result.status === 'SUCCESS') {\n                return { ...result, strategy: 'city_state_pin' };\n            }\n        }\n\n        // Strategy 4: Just PIN code (very reliable in India)\n        if (customer.pin_code) {\n            result = await this.geocodeAddress(`${customer.pin_code}, India`);\n            if (result.status === 'SUCCESS') {\n                return { ...result, strategy: 'pin_only' };\n            }\n        }\n\n        // Strategy 5: Just city\n        if (customer.city_name) {\n            result = await this.geocodeAddress(`${customer.city_name}, India`);\n            if (result.status === 'SUCCESS') {\n                return { ...result, strategy: 'city_only' };\n            }\n        }\n\n        return { \n            latitude: null, \n            longitude: null, \n            status: 'FAILED', \n            error: 'All strategies failed',\n            strategy: 'none'\n        };\n    }\n\n    // Process single batch of customers\n    async processBatch(customers, onProgress) {\n        const results = [];\n        \n        for (let i = 0; i < customers.length; i++) {\n            const customer = customers[i];\n            const address = this.buildAddressString(customer);\n            \n            try {\n                const geocodeResult = await this.geocodeAddressWithFallback(customer);\n                \n                if (geocodeResult.status === 'SUCCESS') {\n                    const updateSuccess = await this.updateCustomerCoordinates(customer.id, geocodeResult);\n                    if (updateSuccess) {\n                        this.successCount++;\n                        console.log(`✅ Success (${geocodeResult.strategy}): ${customer.customer_name}`);\n                    }\n                } else {\n                    this.errorCount++;\n                    console.warn(`❌ Failed: ${customer.customer_name} - ${address} (tried all strategies)`);\n                }\n                \n                this.processedCount++;\n                \n                // Report progress\n                if (onProgress) {\n                    onProgress({\n                        processed: this.processedCount,\n                        success: this.successCount,\n                        errors: this.errorCount,\n                        currentCustomer: customer.customer_name,\n                        currentAddress: address,\n                        result: geocodeResult\n                    });\n                }\n                \n                results.push({\n                    customer: customer,\n                    address: address,\n                    result: geocodeResult\n                });\n                \n                // Small delay between requests to avoid rate limiting\n                await new Promise(resolve => setTimeout(resolve, 100));\n                \n            } catch (error) {\n                this.errorCount++;\n                console.error(`Error processing customer ${customer.customer_name}:`, error);\n            }\n        }\n        \n        return results;\n    }\n\n    // Main function to geocode all customers\n    async geocodeAllCustomers(onProgress, onComplete) {\n        if (this.isProcessing) {\n            throw new Error('Geocoding is already in progress');\n        }\n\n        this.isProcessing = true;\n        this.processedCount = 0;\n        this.successCount = 0;\n        this.errorCount = 0;\n\n        try {\n            // Get customers without coordinates\n            const customers = await this.getCustomersWithoutCoordinates();\n            \n            if (customers.length === 0) {\n                if (onComplete) {\n                    onComplete({\n                        totalCustomers: 0,\n                        processed: 0,\n                        success: 0,\n                        errors: 0,\n                        message: 'All customers already have coordinates!'\n                    });\n                }\n                return;\n            }\n\n            console.log(`Starting geocoding for ${customers.length} customers...`);\n\n            // Process in batches\n            for (let i = 0; i < customers.length; i += BATCH_SIZE) {\n                const batch = customers.slice(i, i + BATCH_SIZE);\n                const batchNumber = Math.floor(i / BATCH_SIZE) + 1;\n                const totalBatches = Math.ceil(customers.length / BATCH_SIZE);\n                \n                console.log(`Processing batch ${batchNumber}/${totalBatches} (${batch.length} customers)`);\n                \n                await this.processBatch(batch, onProgress);\n                \n                // Delay between batches to respect rate limits\n                if (i + BATCH_SIZE < customers.length) {\n                    console.log(`Waiting ${DELAY_BETWEEN_BATCHES}ms before next batch...`);\n                    await new Promise(resolve => setTimeout(resolve, DELAY_BETWEEN_BATCHES));\n                }\n            }\n\n            // Final completion callback\n            if (onComplete) {\n                onComplete({\n                    totalCustomers: customers.length,\n                    processed: this.processedCount,\n                    success: this.successCount,\n                    errors: this.errorCount,\n                    message: 'Geocoding completed!'\n                });\n            }\n\n        } catch (error) {\n            console.error('Geocoding process error:', error);\n            if (onComplete) {\n                onComplete({\n                    totalCustomers: 0,\n                    processed: this.processedCount,\n                    success: this.successCount,\n                    errors: this.errorCount,\n                    error: error.message\n                });\n            }\n        } finally {\n            this.isProcessing = false;\n        }\n    }\n\n    // Get geocoding statistics (improved with detailed logging)\n    async getGeocodingStats() {\n        console.log('Fetching geocoding statistics...');\n        \n        const { data, error } = await supabase\n            .from('customer_master')\n            .select('latitude, longitude, full_address, status')\n            .eq('status', 'ACTIVE');\n\n        if (error) {\n            console.error('Error fetching stats:', error);\n            return null;\n        }\n\n        console.log(`Total active customers in database: ${data.length}`);\n\n        const total = data.length;\n        const withCoordinates = data.filter(item => item.latitude && item.longitude).length;\n        const withoutCoordinates = total - withCoordinates;\n        const hasAddress = data.filter(item => item.full_address && item.full_address.trim()).length;\n        const noAddress = total - hasAddress;\n\n        console.log('Statistics breakdown:');\n        console.log(`- Total: ${total}`);\n        console.log(`- With coordinates: ${withCoordinates}`);\n        console.log(`- Without coordinates: ${withoutCoordinates}`);\n        console.log(`- Has address: ${hasAddress}`);\n        console.log(`- No address: ${noAddress}`);\n\n        return {\n            total,\n            withCoordinates,\n            withoutCoordinates,\n            hasAddress,\n            noAddress,\n            completionPercentage: total > 0 ? (withCoordinates / total * 100).toFixed(1) : 0\n        };\n    }\n}\n\n// React Component for Geocoding UI\nconst GeocodingDashboard = () => {\n    const [geocodingService] = useState(new GeocodingService());\n    const [stats, setStats] = useState(null);\n    const [progress, setProgress] = useState(null);\n    const [isRunning, setIsRunning] = useState(false);\n    const [results, setResults] = useState(null);\n\n    // Load initial stats\n    useEffect(() => {\n        loadStats();\n    }, []);\n\n    const loadStats = async () => {\n        const statsData = await geocodingService.getGeocodingStats();\n        setStats(statsData);\n    };\n\n    const startGeocoding = async () => {\n        setIsRunning(true);\n        setProgress(null);\n        setResults(null);\n\n        await geocodingService.geocodeAllCustomers(\n            // Progress callback\n            (progressData) => {\n                setProgress(progressData);\n            },\n            // Completion callback\n            (resultData) => {\n                setResults(resultData);\n                setIsRunning(false);\n                loadStats(); // Reload stats after completion\n            }\n        );\n    };\n\n    return (\n        <div className=\"min-h-screen bg-gray-50 p-6\">\n            <div className=\"max-w-4xl mx-auto\">\n                <div className=\"mb-8 text-center\">\n                    <h1 className=\"text-3xl font-bold text-blue-600 mb-4\">\n                        📍 Customer Geocoding Dashboard\n                    </h1>\n                    <p className=\"text-gray-600\">\n                        Add GPS coordinates to customer addresses using Google Maps API\n                    </p>\n                </div>\n\n                {/* Statistics Card */}\n                {stats && (\n                    <div className=\"bg-white rounded-lg shadow-lg p-6 mb-8\">\n                        <h2 className=\"text-xl font-semibold mb-4\">Geocoding Statistics</h2>\n                        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n                            <div className=\"text-center\">\n                                <div className=\"text-2xl font-bold text-blue-600\">{stats.total}</div>\n                                <div className=\"text-sm text-gray-600\">Total Customers</div>\n                            </div>\n                            <div className=\"text-center\">\n                                <div className=\"text-2xl font-bold text-green-600\">{stats.withCoordinates}</div>\n                                <div className=\"text-sm text-gray-600\">With Coordinates</div>\n                            </div>\n                            <div className=\"text-center\">\n                                <div className=\"text-2xl font-bold text-red-600\">{stats.withoutCoordinates}</div>\n                                <div className=\"text-sm text-gray-600\">Missing Coordinates</div>\n                            </div>\n                            <div className=\"text-center\">\n                                <div className=\"text-2xl font-bold text-purple-600\">{stats.completionPercentage}%</div>\n                                <div className=\"text-sm text-gray-600\">Completion Rate</div>\n                            </div>\n                        </div>\n                    </div>\n                )}\n\n                {/* Control Panel */}\n                <div className=\"bg-white rounded-lg shadow-lg p-6 mb-8\">\n                    <h2 className=\"text-xl font-semibold mb-4\">Geocoding Control</h2>\n                    \n                    {!isRunning ? (\n                        <button\n                            onClick={startGeocoding}\n                            disabled={stats?.withoutCoordinates === 0}\n                            className=\"bg-blue-600 hover:bg-blue-700 disabled:bg-gray-400 text-white px-6 py-3 rounded-lg font-semibold\"\n                        >\n                            {stats?.withoutCoordinates === 0 ? 'All Customers Geocoded!' : `Start Geocoding ${stats?.withoutCoordinates} Customers`}\n                        </button>\n                    ) : (\n                        <div className=\"text-blue-600 font-semibold\">\n                            🔄 Geocoding in progress...\n                        </div>\n                    )}\n                </div>\n\n                {/* Progress Display */}\n                {progress && (\n                    <div className=\"bg-white rounded-lg shadow-lg p-6 mb-8\">\n                        <h2 className=\"text-xl font-semibold mb-4\">Progress</h2>\n                        <div className=\"space-y-3\">\n                            <div className=\"flex justify-between\">\n                                <span>Processed:</span>\n                                <span className=\"font-semibold\">{progress.processed}</span>\n                            </div>\n                            <div className=\"flex justify-between\">\n                                <span>Successful:</span>\n                                <span className=\"font-semibold text-green-600\">{progress.success}</span>\n                            </div>\n                            <div className=\"flex justify-between\">\n                                <span>Errors:</span>\n                                <span className=\"font-semibold text-red-600\">{progress.errors}</span>\n                            </div>\n                            <div className=\"mt-4\">\n                                <div className=\"text-sm text-gray-600 mb-2\">Currently processing:</div>\n                                <div className=\"font-medium\">{progress.currentCustomer}</div>\n                                <div className=\"text-sm text-gray-500\">{progress.currentAddress}</div>\n                            </div>\n                        </div>\n                    </div>\n                )}\n\n                {/* Results Display */}\n                {results && (\n                    <div className=\"bg-white rounded-lg shadow-lg p-6\">\n                        <h2 className=\"text-xl font-semibold mb-4\">Geocoding Results</h2>\n                        <div className=\"space-y-2\">\n                            <div className=\"flex justify-between\">\n                                <span>Total Customers:</span>\n                                <span className=\"font-semibold\">{results.totalCustomers}</span>\n                            </div>\n                            <div className=\"flex justify-between\">\n                                <span>Successfully Geocoded:</span>\n                                <span className=\"font-semibold text-green-600\">{results.success}</span>\n                            </div>\n                            <div className=\"flex justify-between\">\n                                <span>Failed:</span>\n                                <span className=\"font-semibold text-red-600\">{results.errors}</span>\n                            </div>\n                            <div className=\"flex justify-between\">\n                                <span>Success Rate:</span>\n                                <span className=\"font-semibold text-blue-600\">\n                                    {results.totalCustomers > 0 ? (results.success / results.totalCustomers * 100).toFixed(1) : 0}%\n                                </span>\n                            </div>\n                        </div>\n                        {results.message && (\n                            <div className=\"mt-4 p-3 bg-green-100 text-green-800 rounded\">\n                                {results.message}\n                            </div>\n                        )}\n                        {results.error && (\n                            <div className=\"mt-4 p-3 bg-red-100 text-red-800 rounded\">\n                                Error: {results.error}\n                            </div>\n                        )}\n                    </div>\n                )}\n            </div>\n        </div>\n    );\n};\n\nexport { GeocodingService, GeocodingDashboard };\nexport default GeocodingDashboard;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}