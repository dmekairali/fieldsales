{"ast":null,"code":"var _s = $RefreshSig$();\n// src/hooks/useMedicalRepresentatives.js\nimport { useState, useEffect } from 'react';\nimport { supabase } from '../supabaseClient';\nexport const useMedicalRepresentatives = () => {\n  _s();\n  const [mrList, setMrList] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const fetchMRs = async () => {\n    try {\n      setLoading(true);\n      setError(null);\n      const {\n        data,\n        error: fetchError\n      } = await supabase.from('medical_representatives').select(`\n                    id,\n                    employee_id,\n                    name,\n                    phone,\n                    email,\n                    territory,\n                    manager_name,\n                    joining_date,\n                    monthly_target,\n                    is_active\n                `).eq('is_active', true).order('name', {\n        ascending: true\n      });\n      if (fetchError) {\n        console.error('Error fetching MRs:', fetchError);\n        setError(fetchError.message);\n      } else {\n        setMrList(data || []);\n        console.log(`Loaded ${(data === null || data === void 0 ? void 0 : data.length) || 0} active MRs from database`);\n      }\n    } catch (error) {\n      console.error('Unexpected error fetching MRs:', error);\n      setError('Failed to connect to database');\n    } finally {\n      setLoading(false);\n    }\n  };\n  useEffect(() => {\n    fetchMRs();\n    const mrSubscription = supabase.channel('medical_representatives_changes').on('postgres_changes', {\n      event: '*',\n      schema: 'public',\n      table: 'medical_representatives'\n    }, payload => {\n      console.log('MR data changed:', payload);\n      // Refresh the MR list when changes occur\n      fetchMRs();\n    }).subscribe();\n    return () => {\n      mrSubscription.unsubscribe();\n    };\n  }, []);\n\n  // Helper function to get MR details by name\n  const getMRByName = name => {\n    return mrList.find(mr => mr.name === name);\n  };\n\n  // Helper function to get MR details by employee ID\n  const getMRByEmployeeId = employeeId => {\n    return mrList.find(mr => mr.employee_id === employeeId);\n  };\n\n  // Get MRs by territory\n  const getMRsByTerritory = territory => {\n    return mrList.filter(mr => mr.territory.toLowerCase().includes(territory.toLowerCase()));\n  };\n\n  // Get MRs by manager\n  const getMRsByManager = managerName => {\n    return mrList.filter(mr => mr.manager_name && mr.manager_name.toLowerCase().includes(managerName.toLowerCase()));\n  };\n  return {\n    mrList,\n    loading,\n    error,\n    refetch: fetchMRs,\n    getMRByName,\n    getMRByEmployeeId,\n    getMRsByTerritory,\n    getMRsByManager,\n    totalMRs: mrList.length\n  };\n};\n_s(useMedicalRepresentatives, \"1cJzpYVaHdx3rvyn353CVikggTA=\");","map":{"version":3,"names":["useState","useEffect","supabase","useMedicalRepresentatives","_s","mrList","setMrList","loading","setLoading","error","setError","fetchMRs","data","fetchError","from","select","eq","order","ascending","console","message","log","length","mrSubscription","channel","on","event","schema","table","payload","subscribe","unsubscribe","getMRByName","name","find","mr","getMRByEmployeeId","employeeId","employee_id","getMRsByTerritory","territory","filter","toLowerCase","includes","getMRsByManager","managerName","manager_name","refetch","totalMRs"],"sources":["/Users/kairalimidnight23/Desktop/fieldsales-main 2/src/hooks/useMedicalRepresentatives.js"],"sourcesContent":["// src/hooks/useMedicalRepresentatives.js\nimport { useState, useEffect } from 'react';\nimport { supabase } from '../supabaseClient';\n\n\nexport const useMedicalRepresentatives = () => {\n    const [mrList, setMrList] = useState([]);\n    const [loading, setLoading] = useState(true);\n    const [error, setError] = useState(null);\n\n    const fetchMRs = async () => {\n        try {\n            setLoading(true);\n            setError(null);\n\n            const { data, error: fetchError } = await supabase\n                .from('medical_representatives')\n                .select(`\n                    id,\n                    employee_id,\n                    name,\n                    phone,\n                    email,\n                    territory,\n                    manager_name,\n                    joining_date,\n                    monthly_target,\n                    is_active\n                `)\n                .eq('is_active', true)\n                .order('name', { ascending: true });\n\n            if (fetchError) {\n                console.error('Error fetching MRs:', fetchError);\n                setError(fetchError.message);\n            } else {\n                setMrList(data || []);\n                console.log(`Loaded ${data?.length || 0} active MRs from database`);\n            }\n        } catch (error) {\n            console.error('Unexpected error fetching MRs:', error);\n            setError('Failed to connect to database');\n        } finally {\n            setLoading(false);\n        }\n    };\n\n    useEffect(() => {\n        fetchMRs();\n        \n        \n        const mrSubscription = supabase\n            .channel('medical_representatives_changes')\n            .on('postgres_changes', \n                { \n                    event: '*', \n                    schema: 'public', \n                    table: 'medical_representatives' \n                }, \n                (payload) => {\n                    console.log('MR data changed:', payload);\n                    // Refresh the MR list when changes occur\n                    fetchMRs();\n                }\n            )\n            .subscribe();\n\n        return () => {\n            mrSubscription.unsubscribe();\n        };\n    }, []);\n\n    // Helper function to get MR details by name\n    const getMRByName = (name) => {\n        return mrList.find(mr => mr.name === name);\n    };\n\n    // Helper function to get MR details by employee ID\n    const getMRByEmployeeId = (employeeId) => {\n        return mrList.find(mr => mr.employee_id === employeeId);\n    };\n\n    // Get MRs by territory\n    const getMRsByTerritory = (territory) => {\n        return mrList.filter(mr => \n            mr.territory.toLowerCase().includes(territory.toLowerCase())\n        );\n    };\n\n    // Get MRs by manager\n    const getMRsByManager = (managerName) => {\n        return mrList.filter(mr => \n            mr.manager_name && \n            mr.manager_name.toLowerCase().includes(managerName.toLowerCase())\n        );\n    };\n\n    return {\n        mrList,\n        loading,\n        error,\n        refetch: fetchMRs,\n        getMRByName,\n        getMRByEmployeeId,\n        getMRsByTerritory,\n        getMRsByManager,\n        totalMRs: mrList.length\n    };\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}